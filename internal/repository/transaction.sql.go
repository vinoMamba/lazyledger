// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: transaction.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteTransaction = `-- name: DeleteTransaction :exec
UPDATE transactions SET 
is_deleted = true,
updated_by = $2,
updated_at = $3
WHERE id = $1
`

type DeleteTransactionParams struct {
	ID        string
	UpdatedBy pgtype.Text
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) DeleteTransaction(ctx context.Context, arg DeleteTransactionParams) error {
	_, err := q.db.Exec(ctx, deleteTransaction, arg.ID, arg.UpdatedBy, arg.UpdatedAt)
	return err
}

const getTransactionById = `-- name: GetTransactionById :one
SELECT t.id, t.name, t.amount, t.date, t.remark, c.id AS category_id, c.type 
FROM transactions t 
LEFT JOIN categories c ON t.category_id = c.id
WHERE t.id = $1 AND t.is_deleted = false LIMIT 1
`

type GetTransactionByIdRow struct {
	ID         string
	Name       string
	Amount     pgtype.Numeric
	Date       pgtype.Timestamp
	Remark     pgtype.Text
	CategoryID pgtype.Text
	Type       pgtype.Int2
}

func (q *Queries) GetTransactionById(ctx context.Context, id string) (GetTransactionByIdRow, error) {
	row := q.db.QueryRow(ctx, getTransactionById, id)
	var i GetTransactionByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Amount,
		&i.Date,
		&i.Remark,
		&i.CategoryID,
		&i.Type,
	)
	return i, err
}

const getTransactionListByCreator = `-- name: GetTransactionListByCreator :many
SELECT t.id, t.name, t.amount, t.date, t.remark, c.id AS category_id, c.type 
FROM transactions t 
LEFT JOIN categories c ON t.category_id = c.id
WHERE t.created_by = $1 AND t.is_deleted = false ORDER BY t.date DESC, t.created_at DESC
`

type GetTransactionListByCreatorRow struct {
	ID         string
	Name       string
	Amount     pgtype.Numeric
	Date       pgtype.Timestamp
	Remark     pgtype.Text
	CategoryID pgtype.Text
	Type       pgtype.Int2
}

func (q *Queries) GetTransactionListByCreator(ctx context.Context, createdBy pgtype.Text) ([]GetTransactionListByCreatorRow, error) {
	rows, err := q.db.Query(ctx, getTransactionListByCreator, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionListByCreatorRow
	for rows.Next() {
		var i GetTransactionListByCreatorRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Amount,
			&i.Date,
			&i.Remark,
			&i.CategoryID,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTransaction = `-- name: InsertTransaction :exec
INSERT INTO transactions (
  id, 
  name, 
  amount,
  date,
  remark,
  category_id,
  created_by,
  created_at
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type InsertTransactionParams struct {
	ID         string
	Name       string
	Amount     pgtype.Numeric
	Date       pgtype.Timestamp
	Remark     pgtype.Text
	CategoryID string
	CreatedBy  pgtype.Text
	CreatedAt  pgtype.Timestamp
}

func (q *Queries) InsertTransaction(ctx context.Context, arg InsertTransactionParams) error {
	_, err := q.db.Exec(ctx, insertTransaction,
		arg.ID,
		arg.Name,
		arg.Amount,
		arg.Date,
		arg.Remark,
		arg.CategoryID,
		arg.CreatedBy,
		arg.CreatedAt,
	)
	return err
}

const updateTransaction = `-- name: UpdateTransaction :exec
UPDATE transactions SET 
name = $2,
amount = $3,
date = $4,
remark = $5,
category_id = $6,
updated_by = $7,
updated_at = $8
WHERE id = $1
`

type UpdateTransactionParams struct {
	ID         string
	Name       string
	Amount     pgtype.Numeric
	Date       pgtype.Timestamp
	Remark     pgtype.Text
	CategoryID string
	UpdatedBy  pgtype.Text
	UpdatedAt  pgtype.Timestamp
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) error {
	_, err := q.db.Exec(ctx, updateTransaction,
		arg.ID,
		arg.Name,
		arg.Amount,
		arg.Date,
		arg.Remark,
		arg.CategoryID,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}

const updateTransactionAmount = `-- name: UpdateTransactionAmount :exec
UPDATE transactions SET 
amount = $2,
updated_by = $3,
updated_at = $4
WHERE id = $1
`

type UpdateTransactionAmountParams struct {
	ID        string
	Amount    pgtype.Numeric
	UpdatedBy pgtype.Text
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateTransactionAmount(ctx context.Context, arg UpdateTransactionAmountParams) error {
	_, err := q.db.Exec(ctx, updateTransactionAmount,
		arg.ID,
		arg.Amount,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}

const updateTransactionCategory = `-- name: UpdateTransactionCategory :exec
UPDATE transactions SET 
category_id = $2,
updated_by = $3,
updated_at = $4
WHERE id = $1
`

type UpdateTransactionCategoryParams struct {
	ID         string
	CategoryID string
	UpdatedBy  pgtype.Text
	UpdatedAt  pgtype.Timestamp
}

func (q *Queries) UpdateTransactionCategory(ctx context.Context, arg UpdateTransactionCategoryParams) error {
	_, err := q.db.Exec(ctx, updateTransactionCategory,
		arg.ID,
		arg.CategoryID,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}

const updateTransactionDate = `-- name: UpdateTransactionDate :exec
UPDATE transactions SET 
date = $2,
updated_by = $3,
updated_at = $4
WHERE id = $1
`

type UpdateTransactionDateParams struct {
	ID        string
	Date      pgtype.Timestamp
	UpdatedBy pgtype.Text
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateTransactionDate(ctx context.Context, arg UpdateTransactionDateParams) error {
	_, err := q.db.Exec(ctx, updateTransactionDate,
		arg.ID,
		arg.Date,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}

const updateTransactionName = `-- name: UpdateTransactionName :exec
UPDATE transactions SET 
name = $2,
updated_by = $3,
updated_at = $4
WHERE id = $1
`

type UpdateTransactionNameParams struct {
	ID        string
	Name      string
	UpdatedBy pgtype.Text
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateTransactionName(ctx context.Context, arg UpdateTransactionNameParams) error {
	_, err := q.db.Exec(ctx, updateTransactionName,
		arg.ID,
		arg.Name,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}

const updateTransactionRemark = `-- name: UpdateTransactionRemark :exec
UPDATE transactions SET 
remark = $2,
updated_by = $3,
updated_at = $4
WHERE id = $1
`

type UpdateTransactionRemarkParams struct {
	ID        string
	Remark    pgtype.Text
	UpdatedBy pgtype.Text
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateTransactionRemark(ctx context.Context, arg UpdateTransactionRemarkParams) error {
	_, err := q.db.Exec(ctx, updateTransactionRemark,
		arg.ID,
		arg.Remark,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}
