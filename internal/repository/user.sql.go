// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, avatar, password, is_deleted, created_by, created_at, updated_by, updated_at FROM users WHERE email = $1 AND is_deleted = false LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Avatar,
		&i.Password,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, email, avatar, password, is_deleted, created_by, created_at, updated_by, updated_at FROM users WHERE id = $1 AND is_deleted = false LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Avatar,
		&i.Password,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserInfo = `-- name: GetUserInfo :one
SELECT id, username, email, avatar, password, is_deleted, created_by, created_at, updated_by, updated_at FROM users WHERE id = $1 AND is_deleted = false LIMIT 1
`

func (q *Queries) GetUserInfo(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserInfo, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Avatar,
		&i.Password,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (
  id, 
  username, 
  email, 
  password,
  created_by,
  created_at
) VALUES ($1, $2, $3, $4, $5,$6)
`

type InsertUserParams struct {
	ID        string
	Username  string
	Email     string
	Password  string
	CreatedBy pgtype.Text
	CreatedAt pgtype.Timestamp
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.CreatedBy,
		arg.CreatedAt,
	)
	return err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
UPDATE users SET 
avatar = $2,
updated_by = $3,
updated_at = $4
WHERE id = $1
`

type UpdateUserAvatarParams struct {
	ID        string
	Avatar    pgtype.Text
	UpdatedBy pgtype.Text
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.db.Exec(ctx, updateUserAvatar,
		arg.ID,
		arg.Avatar,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE users SET 
email = $2,
updated_by = $3,
updated_at = $4
WHERE id = $1
`

type UpdateUserEmailParams struct {
	ID        string
	Email     string
	UpdatedBy pgtype.Text
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.Exec(ctx, updateUserEmail,
		arg.ID,
		arg.Email,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET 
password = $2,
updated_by = $3,
updated_at = $4
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID        string
	Password  string
	UpdatedBy pgtype.Text
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword,
		arg.ID,
		arg.Password,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}

const updateUserUsername = `-- name: UpdateUserUsername :exec
UPDATE users SET 
username = $2,
updated_by = $3,
updated_at = $4
WHERE id = $1
`

type UpdateUserUsernameParams struct {
	ID        string
	Username  string
	UpdatedBy pgtype.Text
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateUserUsername(ctx context.Context, arg UpdateUserUsernameParams) error {
	_, err := q.db.Exec(ctx, updateUserUsername,
		arg.ID,
		arg.Username,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}
