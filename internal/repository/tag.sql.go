// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tag.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteTag = `-- name: DeleteTag :exec
UPDATE tags SET 
is_deleted = true,
updated_by = $2,
updated_at = $3
WHERE id = $1
`

type DeleteTagParams struct {
	ID        string
	UpdatedBy pgtype.Text
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) DeleteTag(ctx context.Context, arg DeleteTagParams) error {
	_, err := q.db.Exec(ctx, deleteTag, arg.ID, arg.UpdatedBy, arg.UpdatedAt)
	return err
}

const getTagById = `-- name: GetTagById :one
SELECT id, name, color, is_deleted, created_by, created_at, updated_by, updated_at FROM tags WHERE id = $1 AND is_deleted = false LIMIT 1
`

func (q *Queries) GetTagById(ctx context.Context, id string) (Tag, error) {
	row := q.db.QueryRow(ctx, getTagById, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getTagByName = `-- name: GetTagByName :one
SELECT id, name, color, is_deleted, created_by, created_at, updated_by, updated_at FROM tags WHERE name = $1 AND is_deleted = false LIMIT 1
`

func (q *Queries) GetTagByName(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRow(ctx, getTagByName, name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getTagListByCreator = `-- name: GetTagListByCreator :many
SELECT id, name, color, is_deleted, created_by, created_at, updated_by, updated_at FROM tags WHERE created_by = $1 AND is_deleted = false ORDER BY created_at DESC
`

func (q *Queries) GetTagListByCreator(ctx context.Context, createdBy pgtype.Text) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getTagListByCreator, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Color,
			&i.IsDeleted,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedBy,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTag = `-- name: InsertTag :exec
INSERT INTO tags (
  id, 
  name, 
  color,
  created_by,
  created_at
) VALUES ($1, $2, $3, $4, $5)
`

type InsertTagParams struct {
	ID        string
	Name      string
	Color     string
	CreatedBy pgtype.Text
	CreatedAt pgtype.Timestamp
}

func (q *Queries) InsertTag(ctx context.Context, arg InsertTagParams) error {
	_, err := q.db.Exec(ctx, insertTag,
		arg.ID,
		arg.Name,
		arg.Color,
		arg.CreatedBy,
		arg.CreatedAt,
	)
	return err
}

const updateTag = `-- name: UpdateTag :exec
UPDATE tags SET 
name = $2,
color = $3,
updated_by = $4,
updated_at = $5
WHERE id = $1
`

type UpdateTagParams struct {
	ID        string
	Name      string
	Color     string
	UpdatedBy pgtype.Text
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.Exec(ctx, updateTag,
		arg.ID,
		arg.Name,
		arg.Color,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}
