// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: category.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteCategory = `-- name: DeleteCategory :exec
UPDATE categories SET 
is_deleted = true,
updated_by = $2,
updated_at = $3
WHERE id = $1
`

type DeleteCategoryParams struct {
	ID        string
	UpdatedBy pgtype.Text
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) DeleteCategory(ctx context.Context, arg DeleteCategoryParams) error {
	_, err := q.db.Exec(ctx, deleteCategory, arg.ID, arg.UpdatedBy, arg.UpdatedAt)
	return err
}

const getCategoryById = `-- name: GetCategoryById :one
SELECT id, name, color, icon, type, is_deleted, created_by, created_at, updated_by, updated_at FROM categories WHERE id = $1 AND is_deleted = false LIMIT 1
`

func (q *Queries) GetCategoryById(ctx context.Context, id string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryById, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.Icon,
		&i.Type,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryListByCreator = `-- name: GetCategoryListByCreator :many
SELECT id, name, color, icon, type, is_deleted, created_by, created_at, updated_by, updated_at FROM categories WHERE created_by = $1 AND is_deleted = false
`

func (q *Queries) GetCategoryListByCreator(ctx context.Context, createdBy pgtype.Text) ([]Category, error) {
	rows, err := q.db.Query(ctx, getCategoryListByCreator, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Color,
			&i.Icon,
			&i.Type,
			&i.IsDeleted,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedBy,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCategory = `-- name: InsertCategory :exec
INSERT INTO categories (
  id, 
  name, 
  color,
  icon,
  type,
  created_by,
  created_at
) VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type InsertCategoryParams struct {
	ID        string
	Name      string
	Color     string
	Icon      string
	Type      int16
	CreatedBy pgtype.Text
	CreatedAt pgtype.Timestamp
}

func (q *Queries) InsertCategory(ctx context.Context, arg InsertCategoryParams) error {
	_, err := q.db.Exec(ctx, insertCategory,
		arg.ID,
		arg.Name,
		arg.Color,
		arg.Icon,
		arg.Type,
		arg.CreatedBy,
		arg.CreatedAt,
	)
	return err
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE categories SET 
name = $2,
color = $3,
icon = $4,
type = $5,
updated_by = $6,
updated_at = $7
WHERE id = $1
`

type UpdateCategoryParams struct {
	ID        string
	Name      string
	Color     string
	Icon      string
	Type      int16
	UpdatedBy pgtype.Text
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.Exec(ctx, updateCategory,
		arg.ID,
		arg.Name,
		arg.Color,
		arg.Icon,
		arg.Type,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}
